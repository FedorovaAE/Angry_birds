Игра типа Angry birds

1) предварительно: нам понадобятся библиотеки pygame и pymunk(есть удобная интеграция с pygame)
и импортируем pymunk вместе с утилитой
инициализировать все импортируемые модули Pygame
pygame.init
и создаем отдельный файлик для констант (размер экрана, инпорт изображения, музыка и тд)

необходимо создать опции для отрисовки физических объектов pumunk
им надо передать нашу поверхность отрисовки из pygame
draw_options = pymunk.pygame_util.DrawOptions(screen)

ключивым является пространство, в котором будет происходить вся обработка физики
так же мы сразу выставляем значение гравитации по оси y
space = pymunk.Space()
space.gravity = (0.0, -700.0)

так же нам надо выставить шаг единицы времени для всех вычислений в пронстранстве pymunk
dt = 1.0 / FPS / 2.
upd = dt

    for x in range(2):
        space.step(upd)

у pygame и pymunk разные системы координат поэтому в будущем нам понадобится эта функция
def to_pygame(p):
    return int(p.x), int(-p.y + 600)

основные типы физических объектов Pymunk:
1. динамический - объекты реагируют на столкновения, на них действуют силы гравитации и они имеют конечную массу
(динамические тела взаимодействуют со всеми типами тел)
2. кинематический - это объекты, которые управляются из кода, а не внутри физического движка
на них не дейсвует гравитация, и они обладают бесконечной массой, поэтому они не реагируют на столкновения или силы с другими телами
кинематические тела упраляются за счет установкой их скорости, которая заставляет их двигаться
3. стастический - это тела, которые никогда не двигаются

2) Создаем класс шарика - динамический объект, который нам потом понадобится:
устанавливам массу и радиус шарика
автоматически определяем момент энерции
на основе массы и момента энерции создаем тело объекта
и определяем его место положение
затем на основе тела с радиусом мы создаем форму объекта в виде окружности
добавим в наш класс значение коэффициент упругости (elasticity) и коэфициент трения (friction)
и тип столкновения для фигуры
это наши будущие птички
class Ball:
    def __init__(self, angle, x, y, space):
        mass = 5
        radius = 15
        inertia = pymunk.moment_for_circle(mass, 0, radius, (0, 0))
        body = pymunk.Body(mass, inertia)
        body.position = x, y
        shape = pymunk.Circle(body, radius, (0, 0))
        shape.elasticity = 0.95
        shape.friction = 1
        shape.collision_type = 0
        shape.add(body, shape)
        self.body = body
        self.shape = shape

и сделаем статичекий объект внизу экрана и справа (пол и стена)
экземпляр класса сегмент - отрезок, которому нужно задать координаты начала и конца и толщину
так же назначим форме коэфициент упругости (elasticity) и коэфициент трения (friction)
и определяем тип столкновения для фигуры
достаточно создать фому и поставить в пространство
static_body = pymunk.Body(body_type=pymunk.Body.STATIC)
static_lines = [pymunk.Segment(static_body, (0.0, 60.0), (1200.0, 60.0), 0.0),
                pymunk.Segment(static_body, (1200.0, 60.0), (1200.0, 800.0), 0.0)]
for line in static_lines:
    line.elasticity = 0.95
    line.friction = 1
    line.collision_type = 2

space.add(static_lines)

3) Создадим класс подобный шарику только квадратной формы - для создания преграды:
нам не понадобится радиус
class Brick:
    def __init__(self, space, size=(30, 30)):
        mass = 5
        moment = 1000
        body = pymunk.Body(mass, moment)
        body.position = Vec2d()
        shape = pymunk.Poly.create_box(body, size)
        shape.friction = 0.5
        shape.collision_type = 1
        shape.add(body, shape)
        self.body = body
        self.shape = shape
        self.image = pygame.image.load("")

а так как объекты будут сталкиваться позже нам понадобится
add_collision_handler(collision_type_a, collision_type_b) [источник]
Возвращает CollisionHandler для коллизий между объектами типа collision_type_a и collision_type_b.

Всякий раз, когда фигуры с типами столкновений (Shape.collision_type)
a и b сталкиваются, этот обработчик будет использоваться для обработки событий столкновения.
При создании нового обработчика коллизий все обратные вызовы будут настроены на встроенные обратные вызовы,
которые выполняют поведение по умолчанию (вызывают обработчики подстановочных знаков и принимают все коллизии).

Параметры:
collision_type_a (инт) – тип столкновения
collision_type_b (инт) – тип столкновения
Возвращаемый тип:
CollisionHandler